<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/devvillar/resourl/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/devvillar/resourl/MainActivity.kt" />
              <option name="originalContent" value="package com.devvillar.resourl&#10;&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.devvillar.resourl.features.auth.presentation.fragments.LoginFragment&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.activity_main)&#10;&#10;        if (savedInstanceState == null) {&#10;            supportFragmentManager.beginTransaction()&#10;                .replace(R.id.container_fragment, LoginFragment())&#10;                .commitNow()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.devvillar.resourl&#10;&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.devvillar.resourl.features.auth.presentation.fragments.LoginFragment&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.activity_main)&#10;&#10;        if (savedInstanceState == null) {&#10;            supportFragmentManager.beginTransaction()&#10;                .replace(R.id.container_fragment, LoginFragment())&#10;                .commitNow()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/devvillar/resourl/features/addresource/presentation/fragments/AddResourceFragment_new.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/devvillar/resourl/features/addresource/presentation/fragments/AddResourceFragment_new.kt" />
              <option name="updatedContent" value="package com.devvillar.resourl.features.addresource.presentation.fragments&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.devvillar.resourl.R&#10;import com.devvillar.resourl.features.addresource.adapters.AddResourceAdapter&#10;import com.devvillar.resourl.features.addresource.adapters.OnResourceEditClickListener&#10;import com.devvillar.resourl.features.addresource.domain.ResourceItem&#10;import com.devvillar.resourl.features.addresource.presentation.viewmodels.AddResourceViewModel&#10;&#10;class AddResourceFragment : Fragment(), OnResourceEditClickListener {&#10;&#10;    private lateinit var viewModel: AddResourceViewModel&#10;    private lateinit var adapter: AddResourceAdapter&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_add_resource, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        viewModel = ViewModelProvider(this)[AddResourceViewModel::class.java]&#10;&#10;        setupRecyclerView(view)&#10;        observeViewModel()&#10;    }&#10;&#10;    private fun setupRecyclerView(view: View) {&#10;        val recyclerView = view.findViewById&lt;RecyclerView&gt;(R.id.recycler_view_add_resource)&#10;        recyclerView.layoutManager = LinearLayoutManager(context).apply {&#10;            stackFromEnd = true&#10;        }&#10;    }&#10;&#10;    private fun observeViewModel() {&#10;        viewModel.resourceItems.observe(viewLifecycleOwner) { items -&gt;&#10;            adapter = AddResourceAdapter(items, this)&#10;            view?.findViewById&lt;RecyclerView&gt;(R.id.recycler_view_add_resource)?.adapter = adapter&#10;        }&#10;    }&#10;&#10;    override fun onEditClick(resourceItem: ResourceItem) {&#10;        // Navegar al EditResourceFragment&#10;        val editFragment = EditResourceFragment.newInstance()&#10;&#10;        // Crear bundle con los datos del resource a editar&#10;        val bundle = Bundle().apply {&#10;            putInt(&quot;resource_id&quot;, resourceItem.id)&#10;            putString(&quot;resource_title&quot;, resourceItem.title)&#10;            putString(&quot;resource_url&quot;, resourceItem.url)&#10;            putString(&quot;resource_description&quot;, resourceItem.description)&#10;            putString(&quot;resource_category&quot;, resourceItem.category)&#10;            putStringArrayList(&quot;resource_tags&quot;, ArrayList(resourceItem.tags))&#10;        }&#10;        editFragment.arguments = bundle&#10;&#10;        // Realizar la transiciÃ³n del fragment&#10;        parentFragmentManager.beginTransaction()&#10;            .replace(R.id.fragment_container, editFragment)&#10;            .addToBackStack(null)&#10;            .commit()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>